#!/usr/bin/env node
/**
 * Air„É¨„Ç∏Êìç‰ΩúË®òÈå≤„ÉÑ„Éº„É´
 * „ÅÇ„Å™„Åü„ÅÆÊìç‰Ωú„ÇíË®òÈå≤„Åó„Å¶„ÄÅËá™ÂãïÂÆüË°åÂèØËÉΩ„Å™„Ç≥„Éº„Éâ„ÇíÁîüÊàê„Åó„Åæ„Åô
 */

const { chromium } = require('playwright');
const fs = require('fs').promises;
const path = require('path');

// Ë®≠ÂÆö
const CONFIG = {
  airregi: {
    username: process.env.AIRREGI_USERNAME || 'info@openmart.jp',
    password: process.env.AIRREGI_PASSWORD || 'info@openmartjp2024'
  }
};

console.log('üé• Air„É¨„Ç∏Êìç‰ΩúË®òÈå≤„ÉÑ„Éº„É´');
console.log('=======================');
console.log('');
console.log('üìù ‰Ωø„ÅÑÊñπ:');
console.log('1. „Éñ„É©„Ç¶„Ç∂„ÅåÈñã„Åç„Åæ„Åô');
console.log('2. Air„É¨„Ç∏„Å´„É≠„Ç∞„Ç§„É≥„Åó„Å¶„ÄÅCSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åæ„Åß„ÅÆÊìç‰Ωú„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ');
console.log('3. Êìç‰Ωú„ÅåÂÆå‰∫Ü„Åó„Åü„Çâ„ÄÅ„Éñ„É©„Ç¶„Ç∂„ÇíÈñâ„Åò„Å¶„Åè„Å†„Åï„ÅÑ');
console.log('4. Ë®òÈå≤„Åï„Çå„ÅüÊìç‰Ωú„Åå airregi-recorded-actions.json „Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åô');
console.log('');
console.log('‚ö†Ô∏è  Ê≥®ÊÑè:');
console.log('- „ÇÜ„Å£„Åè„Çä„Å®Êìç‰Ωú„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÂêÑ„Ç¢„ÇØ„Ç∑„Éß„É≥Èñì„Å´1-2Áßí„ÅÆÈñìÈöî„ÇíÁ©∫„Åë„ÇãÔºâ');
console.log('- „Éë„Çπ„ÉØ„Éº„Éâ„ÅØËá™ÂãïÁöÑ„Å´„Éû„Çπ„ÇØ„Åï„Çå„Åæ„Åô');
console.log('');

async function recordActions() {
  // Ë®òÈå≤„Åô„ÇãÊìç‰Ωú„ÅÆ„É™„Çπ„Éà
  const recordedActions = [];
  
  // „Éñ„É©„Ç¶„Ç∂„ÇíËµ∑Âãï
  const browser = await chromium.launch({
    headless: false,
    slowMo: 500
  });

  const context = await browser.newContext({
    locale: 'ja-JP',
    timezoneId: 'Asia/Tokyo',
    // „Éì„Éá„Ç™Èå≤Áîª„ÇÇÊúâÂäπÂåñ
    recordVideo: {
      dir: './recordings',
      size: { width: 1280, height: 720 }
    }
  });

  // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíË®≠ÂÆö
  context.on('page', page => {
    // „Éö„Éº„Ç∏„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥
    page.on('framenavigated', frame => {
      if (frame === page.mainFrame()) {
        recordedActions.push({
          type: 'navigate',
          url: frame.url(),
          timestamp: new Date().toISOString()
        });
        console.log(`üìç „Éö„Éº„Ç∏ÈÅ∑Áßª: ${frame.url()}`);
      }
    });

    // „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà
    page.on('click', async (selector) => {
      console.log(`üñ±Ô∏è  „ÇØ„É™„ÉÉ„ÇØÊ§úÂá∫„ÇíË®≠ÂÆö‰∏≠...`);
    });
  });

  const page = await context.newPage();

  // „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇíË®òÈå≤
  await page.exposeFunction('recordClick', async (data) => {
    recordedActions.push({
      type: 'click',
      selector: data.selector,
      text: data.text,
      position: { x: data.x, y: data.y },
      timestamp: new Date().toISOString()
    });
    console.log(`üñ±Ô∏è  „ÇØ„É™„ÉÉ„ÇØ: ${data.text || data.selector}`);
  });

  // ÂÖ•Âäõ„Ç§„Éô„É≥„Éà„ÇíË®òÈå≤
  await page.exposeFunction('recordInput', async (data) => {
    // „Éë„Çπ„ÉØ„Éº„Éâ„Éï„Ç£„Éº„É´„Éâ„ÅÆÂ†¥Âêà„ÅØ„Éû„Çπ„ÇØ
    const value = data.type === 'password' ? '***' : data.value;
    recordedActions.push({
      type: 'fill',
      selector: data.selector,
      value: data.type === 'password' ? CONFIG.airregi.password : data.value,
      inputType: data.type,
      timestamp: new Date().toISOString()
    });
    console.log(`‚å®Ô∏è  ÂÖ•Âäõ: ${data.selector} = ${value}`);
  });

  // „Éö„Éº„Ç∏„Å´„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíÊ≥®ÂÖ•
  await page.addInitScript(() => {
    // „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà
    document.addEventListener('click', (e) => {
      const target = e.target;
      const selector = target.tagName.toLowerCase() + 
        (target.id ? `#${target.id}` : '') +
        (target.className ? `.${target.className.split(' ').join('.')}` : '');
      
      window.recordClick({
        selector: selector,
        text: target.textContent?.trim().substring(0, 50),
        x: e.pageX,
        y: e.pageY
      });
    }, true);

    // ÂÖ•Âäõ„Ç§„Éô„É≥„Éà
    document.addEventListener('change', (e) => {
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
        const target = e.target;
        const selector = target.tagName.toLowerCase() + 
          (target.id ? `#${target.id}` : '') +
          (target.name ? `[name="${target.name}"]` : '');
        
        window.recordInput({
          selector: selector,
          value: target.value,
          type: target.type || 'text'
        });
      }
    }, true);
  });

  // Air„É¨„Ç∏„ÅÆ„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„ÇíÈñã„Åè
  console.log('üåê Air„É¨„Ç∏„ÇíÈñã„ÅÑ„Å¶„ÅÑ„Åæ„Åô...');
  await page.goto('https://airregi.jp/');

  // „É¶„Éº„Ç∂„Éº„ÅåÊìç‰Ωú„ÇíÂÆå‰∫Ü„Åô„Çã„Åæ„ÅßÂæÖ„Å§
  console.log('');
  console.log('üë§ „Éñ„É©„Ç¶„Ç∂„ÅßÊìç‰Ωú„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ...');
  console.log('   ÂÆå‰∫Ü„Åó„Åü„Çâ„Éñ„É©„Ç¶„Ç∂„ÇíÈñâ„Åò„Å¶„Åè„Å†„Åï„ÅÑ');
  console.log('');

  // „Éñ„É©„Ç¶„Ç∂„ÅåÈñâ„Åò„Çâ„Çå„Çã„Åæ„ÅßÂæÖ„Å§
  await new Promise((resolve) => {
    browser.on('disconnected', resolve);
  });

  // Ë®òÈå≤„Çí‰øùÂ≠ò
  const outputPath = path.join(__dirname, 'airregi-recorded-actions.json');
  await fs.writeFile(
    outputPath,
    JSON.stringify(recordedActions, null, 2),
    'utf8'
  );

  console.log('');
  console.log(`‚úÖ Êìç‰Ωú„ÅÆË®òÈå≤„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`);
  console.log(`üìÅ ‰øùÂ≠òÂÖà: ${outputPath}`);
  console.log(`üìä Ë®òÈå≤„Åï„Çå„Åü„Ç¢„ÇØ„Ç∑„Éß„É≥Êï∞: ${recordedActions.length}`);

  // ÂÆüË°åÂèØËÉΩ„Å™„Çπ„ÇØ„É™„Éó„Éà„ÇÇÁîüÊàê
  await generateExecutableScript(recordedActions);
}

// Ë®òÈå≤„Åã„ÇâÂÆüË°åÂèØËÉΩ„Å™„Çπ„ÇØ„É™„Éó„Éà„ÇíÁîüÊàê
async function generateExecutableScript(actions) {
  const script = `#!/usr/bin/env node
/**
 * Ë®òÈå≤„Åï„Çå„ÅüÊìç‰Ωú„ÇíÂÜçÂÆüË°å„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
 * Ëá™ÂãïÁîüÊàêÊó•ÊôÇ: ${new Date().toISOString()}
 */

const { chromium } = require('playwright');
const path = require('path');

async function runRecordedActions() {
  const browser = await chromium.launch({
    headless: false,
    slowMo: 300
  });

  const context = await browser.newContext({
    locale: 'ja-JP',
    timezoneId: 'Asia/Tokyo'
  });

  const page = await context.newPage();

  try {
    console.log('üöÄ Ë®òÈå≤„Åï„Çå„ÅüÊìç‰Ωú„ÇíÂÆüË°åÈñãÂßã...');
    
${actions.map(action => {
  switch (action.type) {
    case 'navigate':
      return `    // „Éö„Éº„Ç∏ÈÅ∑Áßª: ${action.url}
    await page.goto('${action.url}');
    await page.waitForLoadState('networkidle');
    console.log('üìç „Éö„Éº„Ç∏: ${action.url}');`;
    
    case 'click':
      return `    // „ÇØ„É™„ÉÉ„ÇØ: ${action.text || action.selector}
    await page.click('${action.selector}');
    await page.waitForTimeout(1000);
    console.log('üñ±Ô∏è  „ÇØ„É™„ÉÉ„ÇØ: ${action.text || action.selector}');`;
    
    case 'fill':
      const value = action.inputType === 'password' ? 
        '${CONFIG.airregi.password}' : 
        `'${action.value}'`;
      return `    // ÂÖ•Âäõ: ${action.selector}
    await page.fill('${action.selector}', ${value});
    await page.waitForTimeout(500);
    console.log('‚å®Ô∏è  ÂÖ•Âäõ: ${action.selector}');`;
    
    default:
      return `    // ‰∏çÊòé„Å™„Ç¢„ÇØ„Ç∑„Éß„É≥: ${action.type}`;
  }
}).join('\n\n')}

    console.log('‚úÖ „Åô„Åπ„Å¶„ÅÆÊìç‰Ωú„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error.message);
  } finally {
    await browser.close();
  }
}

// Ë®≠ÂÆö
const CONFIG = {
  airregi: {
    username: process.env.AIRREGI_USERNAME || 'info@openmart.jp',
    password: process.env.AIRREGI_PASSWORD || 'info@openmartjp2024'
  }
};

// ÂÆüË°å
runRecordedActions().catch(console.error);
`;

  const scriptPath = path.join(__dirname, 'airregi-playback.js');
  await fs.writeFile(scriptPath, script, 'utf8');
  await fs.chmod(scriptPath, '755');

  console.log(`üìÑ ÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà„ÇÇÁîüÊàê„Åó„Åæ„Åó„Åü: ${scriptPath}`);
  console.log('');
  console.log('üéØ Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:');
  console.log('1. Ë®òÈå≤„ÇíÁ¢∫Ë™ç: cat airregi-recorded-actions.json');
  console.log('2. ÂÜçÂÆüË°å: node airregi-playback.js');
}

// „É°„Ç§„É≥ÂÆüË°å
recordActions().catch(error => {
  console.error('‚ùå „Ç®„É©„Éº:', error);
  process.exit(1);
});