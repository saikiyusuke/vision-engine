/**
 * AutoClaude Vision ChromeÁµ±ÂêàÁâà
 * Chrome‰øùÂ≠ò„Éë„Çπ„ÉØ„Éº„Éâ„Å®„ÅÆÈÄ£Êê∫Ê©üËÉΩ„ÇíËøΩÂä†
 */

const AutoClaudeVision = require('./autoclaude-vision');
const ChromeAutoLogin = require('./chrome-auto-login');

class AutoClaudeVisionChrome extends AutoClaudeVision {
    constructor(options = {}) {
        super(options);
        this.chromeLogin = new ChromeAutoLogin({
            headless: options.headless || false
        });
        this.useChromeProfile = options.useChromeProfile !== false;
    }

    /**
     * Chrome „Éó„É≠„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®„Åó„Å¶„Éñ„É©„Ç¶„Ç∂„ÇíËµ∑Âãï
     */
    async launch() {
        if (this.useChromeProfile) {
            console.log('üîß ChromeÁµ±Âêà„É¢„Éº„Éâ„ÅßËµ∑Âãï');
            this.page = await this.chromeLogin.launch();
            this.browser = this.page.context();
        } else {
            // ÈÄöÂ∏∏„ÅÆAutoClaudeVisionËµ∑Âãï
            await super.launch();
        }
    }

    /**
     * ChromeËá™Âãï„É≠„Ç∞„Ç§„É≥Ê©üËÉΩ‰ªò„Åç„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥
     */
    async gotoWithAutoLogin(url, siteConfig = {}) {
        // Ëá™Âãï„É≠„Ç∞„Ç§„É≥„ÇíË©¶Ë°å
        const loginSuccess = await this.chromeLogin.autoLogin(url, siteConfig);
        
        if (!loginSuccess) {
            console.log('üîÑ AutoClaude Vision„Åß„É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ„ÇíÁ∂ôÁ∂ö...');
            // Ëá™ÂãïÂÖ•Âäõ„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅAutoClaudeVision„ÅÆÊ©üËÉΩ„Çí‰ΩøÁî®
            return await super.goto(url);
        }
        
        return loginSuccess;
    }

    /**
     * Ê±éÁî®ÁöÑ„Å™„Çµ„Ç§„Éà„É≠„Ç∞„Ç§„É≥ÔºàËá™ÁÑ∂Ë®ÄË™û + ChromeËá™ÂãïÂÖ•ÂäõÔºâ
     */
    async loginToSite(siteName, options = {}) {
        const siteConfig = ChromeAutoLogin.getSiteConfig(siteName);
        const url = options.url || siteConfig.url;
        
        if (!url) {
            throw new Error(`„Çµ„Ç§„Éà ${siteName} „ÅÆURL„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì`);
        }

        console.log(`\nüåê ${siteName} „Å´„É≠„Ç∞„Ç§„É≥‰∏≠...`);
        
        // „Åæ„ÅöChromeËá™ÂãïÂÖ•Âäõ„ÇíË©¶„Åô
        const autoLoginSuccess = await this.chromeLogin.autoLogin(url, siteConfig);
        
        if (autoLoginSuccess) {
            console.log('‚úÖ ChromeËá™ÂãïÂÖ•Âäõ„Åß„É≠„Ç∞„Ç§„É≥ÊàêÂäü');
            return true;
        }

        // Ëá™ÂãïÂÖ•Âäõ„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÄÅAutoClaudeVision„ÅßÂá¶ÁêÜ
        console.log('ü§ñ AutoClaudeVision„Åß„É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ...');
        
        // Ëá™ÁÑ∂Ë®ÄË™û„Åß„É≠„Ç∞„Ç§„É≥„Éï„Ç©„Éº„É†„ÇíÊ§úÂá∫„Åó„Å¶ÂÖ•Âäõ
        const steps = [
            { action: 'fill', target: '„É¶„Éº„Ç∂„ÉºÂêç„Åæ„Åü„ÅØ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆÂÖ•ÂäõÊ¨Ñ', value: options.username },
            { action: 'fill', target: '„Éë„Çπ„ÉØ„Éº„Éâ„ÅÆÂÖ•ÂäõÊ¨Ñ', value: options.password },
            { action: 'click', target: '„É≠„Ç∞„Ç§„É≥„Éú„Çø„É≥„Åæ„Åü„ÅØSign in„Éú„Çø„É≥' }
        ];

        try {
            await this.executeSteps(steps);
            console.log('‚úÖ „É≠„Ç∞„Ç§„É≥ÊàêÂäü');
            return true;
        } catch (error) {
            console.error('‚ùå „É≠„Ç∞„Ç§„É≥Â§±Êïó:', error.message);
            
            // ÊúÄÂæå„ÅÆÊâãÊÆµÔºöÊâãÂãï„É≠„Ç∞„Ç§„É≥Ë£úÂä©
            if (options.allowManual) {
                return await this.chromeLogin.assistLogin(url);
            }
            
            return false;
        }
    }

    /**
     * GitHubÂ∞ÇÁî®„É≠„Ç∞„Ç§„É≥Ôºà2Ë¶ÅÁ¥†Ë™çË®ºÂØæÂøúÔºâ
     */
    async loginToGitHub(options = {}) {
        console.log('üêô GitHub„Å´„É≠„Ç∞„Ç§„É≥‰∏≠...');
        
        // GitHub„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å∏
        await this.goto('https://github.com/login');
        
        // ChromeËá™ÂãïÂÖ•Âäõ„ÇíË©¶„Åô
        const autoFilled = await this.triggerChromeAutofill();
        
        if (!autoFilled && options.username && options.password) {
            // ÊâãÂãï„ÅßÂÖ•Âäõ
            await this.fill('Username or email address„ÅÆÂÖ•ÂäõÊ¨Ñ', options.username);
            await this.fill('Password„ÅÆÂÖ•ÂäõÊ¨Ñ', options.password);
        }
        
        // „É≠„Ç∞„Ç§„É≥„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
        await this.click('Sign in„Éú„Çø„É≥');
        
        // 2Ë¶ÅÁ¥†Ë™çË®º„ÅÆÁ¢∫Ë™ç
        try {
            await this.waitFor('2Ë¶ÅÁ¥†Ë™çË®º„ÅÆ„Éö„Éº„Ç∏„Åæ„Åü„ÅØË™çË®º„Ç≥„Éº„ÉâÂÖ•ÂäõÊ¨Ñ', 5000);
            console.log('üîê 2Ë¶ÅÁ¥†Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô');
            
            if (options.twoFactorCode) {
                await this.fill('Ë™çË®º„Ç≥„Éº„Éâ„ÅÆÂÖ•ÂäõÊ¨Ñ', options.twoFactorCode);
                await this.click('Verify„Éú„Çø„É≥„Åæ„Åü„ÅØÁ¢∫Ë™ç„Éú„Çø„É≥');
            } else {
                console.log('‚è≥ Ë™çË®º„Ç≥„Éº„Éâ„ÅÆÂÖ•Âäõ„ÇíÂæÖ„Å£„Å¶„ÅÑ„Åæ„Åô...');
                await this.page.waitForNavigation({ timeout: 120000 });
            }
        } catch {
            // 2Ë¶ÅÁ¥†Ë™çË®º„Å™„Åó
            console.log('‚úÖ 2Ë¶ÅÁ¥†Ë™çË®º„Å™„Åó„Åß„É≠„Ç∞„Ç§„É≥ÂÆå‰∫Ü');
        }
        
        return true;
    }

    /**
     * ChromeËá™ÂãïÂÖ•Âäõ„Çí„Éà„É™„Ç¨„Éº
     */
    async triggerChromeAutofill() {
        try {
            // „Éë„Çπ„ÉØ„Éº„Éâ„Éï„Ç£„Éº„É´„Éâ„ÇíÊé¢„Åô
            const passwordField = await this.page.$('input[type="password"]');
            if (!passwordField) return false;
            
            // Ëá™ÂãïÂÖ•Âäõ„Çí„Éà„É™„Ç¨„Éº
            await passwordField.click();
            await this.page.waitForTimeout(500);
            await this.page.keyboard.press('Tab');
            await this.page.keyboard.press('Shift+Tab');
            await this.page.waitForTimeout(1000);
            
            // ÂÄ§„ÅåÂÖ•Âäõ„Åï„Çå„Åü„ÅãÁ¢∫Ë™ç
            const value = await passwordField.evaluate(el => el.value);
            return !!value;
        } catch {
            return false;
        }
    }

    /**
     * „Éñ„É©„Ç¶„Ç∂„ÇíÈñâ„Åò„Çã
     */
    async close() {
        if (this.useChromeProfile) {
            await this.chromeLogin.close();
        } else {
            await super.close();
        }
    }
}

module.exports = AutoClaudeVisionChrome;